'use client';

import { motion } from 'framer-motion';
import { useState, useEffect } from 'react';

const Research = () => {
  const researchProjects = [
    {
      title: "ÏßÄÏó≠ Í≤ΩÏ†ú ÌôúÏÑ±Ìôî Î∞©Ïïà Ïó∞Íµ¨",
      category: "Í≤ΩÏ†ú Î∂ÑÏÑù",
      period: "2024.01 - 2024.03",
      description: "ÏßÄÏó≠ ÏÉÅÍ∂å Î∂ÑÏÑù Î∞è ÌôúÏÑ±Ìôî Ï†ÑÎûµ ÏàòÎ¶Ω, Ï≤≠ÎÖÑ Ï∞ΩÏóÖ ÏÉùÌÉúÍ≥Ñ Ï°∞ÏÑ± Î∞©Ïïà Ïó∞Íµ¨",
      keyFindings: [
        "ÏÉÅÍ∂å Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑùÏùÑ ÌÜµÌïú ÏóÖÏ¢ÖÎ≥Ñ ÏÑ±Í≥µ ÏöîÏù∏ ÎèÑÏ∂ú",
        "Ï≤≠ÎÖÑ Ï∞ΩÏóÖÍ∞Ä Ïù∏ÌÑ∞Î∑∞Î•º ÌÜµÌïú ÎãàÏ¶à ÌååÏïÖ",
        "ÏßÄÏó≠ ÌäπÏÑ±ÏùÑ Í≥†Î†§Ìïú Ï∞®Î≥ÑÌôî Ï†ÑÎûµ ÏàòÎ¶Ω"
      ]
    },
    {
      title: "ÏÜåÏÖú Î≤§Ï≤ò ÏÑ±Í≥µ ÏöîÏù∏ Î∂ÑÏÑù",
      category: "Ï∞ΩÏóÖ Ïó∞Íµ¨",
      period: "2023.09 - 2023.12",
      description: "ÏÇ¨ÌöåÏ†Å Í∞ÄÏπòÏôÄ ÏàòÏùµÏÑ±ÏùÑ ÎèôÏãúÏóê Ï∂îÍµ¨ÌïòÎäî ÏÜåÏÖú Î≤§Ï≤òÏùò ÏÑ±Í≥µ ÏöîÏù∏ Ïó∞Íµ¨",
      keyFindings: [
        "ÎπÑÏ¶àÎãàÏä§ Î™®Îç∏Ïùò ÏßÄÏÜçÍ∞ÄÎä•ÏÑ± ÌèâÍ∞Ä",
        "ÏÇ¨ÌöåÏ†Å ÏûÑÌå©Ìä∏ Ï∏°Ï†ï Î∞©Î≤ïÎ°† Í∞úÎ∞ú",
        "Ïä§ÏºÄÏùºÏóÖ Ï†ÑÎûµ ÏàòÎ¶Ω"
      ]
    },
    {
      title: "MZÏÑ∏ÎåÄ ÏÜåÎπÑ Ìä∏Î†åÎìú Î∂ÑÏÑù",
      category: "ÏãúÏû• Ï°∞ÏÇ¨",
      period: "2023.06 - 2023.08",
      description: "MZÏÑ∏ÎåÄÏùò ÏÜåÎπÑ Ìå®ÌÑ¥ Î∞è Í∞ÄÏπòÏÜåÎπÑ Ìä∏Î†åÎìú Î∂ÑÏÑù",
      keyFindings: [
        "Í∞ÄÏπòÏÜåÎπÑÏùò Ï£ºÏöî ÎèôÏù∏ ÌååÏïÖ",
        "Î∏åÎûúÎìú Ï∂©ÏÑ±ÎèÑÏóê ÏòÅÌñ•ÏùÑ ÎØ∏ÏπòÎäî ÏöîÏù∏ Î∂ÑÏÑù",
        "ÎîîÏßÄÌÑ∏ Ï±ÑÎÑê ÌôúÏö© Ï†ÑÎûµ ÎèÑÏ∂ú"
      ]
    }
  ];

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.3,
        duration: 0.8
      }
    }
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: { duration: 0.8, ease: "easeOut" }
    }
  };

  const [text, setText] = useState('');
  const fullText = 'Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞òÏùò Ïù∏ÏÇ¨Ïù¥Ìä∏Î°ú ÎπÑÏ¶àÎãàÏä§Ïùò ÎØ∏ÎûòÎ•º ÏÑ§Í≥ÑÌï©ÎãàÎã§';
  
  useEffect(() => {
    let currentText = '';
    let currentIndex = 0;

    const typingInterval = setInterval(() => {
      if (currentIndex < fullText.length) {
        currentText += fullText[currentIndex];
        setText(currentText);
        currentIndex++;
      } else {
        clearInterval(typingInterval);
      }
    }, 100);

    return () => clearInterval(typingInterval);
  }, []);

  return (
    <section className="py-20 min-h-screen bg-gradient-to-br from-gray-950 via-blue-900 to-purple-900 relative overflow-hidden">
      {/* Î∞∞Í≤Ω ÎîîÏûêÏù∏ ÏöîÏÜå */}
      <div className="absolute inset-0">
        <div className="absolute inset-0 opacity-20">
          {/* ÎèÑÌä∏ Ìå®ÌÑ¥ */}
          <svg className="absolute w-full h-full" xmlns="http://www.w3.org/2000/svg">
            <defs>
              <pattern id="dots" x="0" y="0" width="40" height="40" patternUnits="userSpaceOnUse">
                <circle cx="2" cy="2" r="1" fill="rgba(255,255,255,0.1)"/>
              </pattern>
            </defs>
            <rect width="100%" height="100%" fill="url(#dots)"/>
          </svg>
        </div>
        {/* Í∑∏ÎùºÎç∞Ïù¥ÏÖò Î∏îÎü¨ */}
        <div className="absolute top-1/4 -left-1/4 w-[600px] h-[600px] bg-gradient-to-r from-blue-400 to-purple-500 rounded-full filter blur-[120px] animate-blob"></div>
        <div className="absolute bottom-1/4 -right-1/4 w-[600px] h-[600px] bg-gradient-to-l from-indigo-400 to-blue-500 rounded-full filter blur-[120px] animate-blob" style={{ animationDelay: '2s' }}></div>
        <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-[800px] h-[800px] bg-gradient-to-tr from-purple-400 to-blue-300 rounded-full filter blur-[150px] animate-blob" style={{ animationDelay: '1s' }}></div>
      </div>

      <div className="container mx-auto px-4 relative z-10">
        <motion.div
          variants={containerVariants}
          initial="hidden"
          whileInView="visible"
          viewport={{ once: true }}
          className="max-w-6xl mx-auto"
        >
          <motion.div variants={itemVariants} className="text-center mb-16">
            <h2 className="text-5xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-400 via-purple-500 to-indigo-500 mb-6 tracking-tight">
              Research & Analysis
            </h2>
            <p className="text-gray-100 text-lg h-6 max-w-2xl mx-auto">
              {text}
            </p>
          </motion.div>

          <div className="grid gap-8">
            {researchProjects.map((project, index) => (
              <motion.div
                key={index}
                variants={itemVariants}
                className="bg-gradient-to-br from-gray-950/50 to-purple-900/50 backdrop-blur-lg p-8 border border-blue-500/10 hover:border-blue-500/20 transition-all duration-500 group relative overflow-hidden"
                style={{
                  borderRadius: "40px"
                }}
              >
                {/* Î∞∞Í≤Ω Ìö®Í≥º */}
                <div className="absolute inset-0 bg-gradient-to-r from-blue-500/5 via-purple-500/5 to-indigo-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
                <div className="absolute inset-0 bg-gradient-to-r from-blue-500/10 via-purple-500/10 to-indigo-500/10 blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
                
                <div className="flex flex-col md:flex-row md:items-start gap-8 relative z-10">
                  <div className="md:w-1/4">
                    <motion.span 
                      className="px-6 py-3 bg-gradient-to-r from-blue-500/20 to-purple-500/20 text-gray-300 text-sm font-medium inline-block rounded-[20px]"
                      whileHover={{ scale: 1.05 }}
                    >
                      {project.category}
                    </motion.span>
                    <p className="mt-4 text-gray-300/70 text-sm">
                      {project.period}
                    </p>
                  </div>
                  <div className="md:w-3/4">
                    <h3 className="text-2xl font-bold text-gray-100 mb-4 group-hover:text-transparent group-hover:bg-clip-text group-hover:bg-gradient-to-r group-hover:from-blue-400 group-hover:to-purple-400 transition-all duration-500">
                      {project.title}
                    </h3>
                    <p className="text-gray-200/90 mb-6 leading-relaxed">
                      {project.description}
                    </p>
                    <div className="space-y-4">
                      <h4 className="text-lg font-semibold text-blue-400 mb-4">
                        Ï£ºÏöî Ïó∞Íµ¨ Í≤∞Í≥º
                      </h4>
                      {project.keyFindings.map((finding, idx) => (
                        <motion.div 
                          key={idx} 
                          className="flex items-start gap-4 group/item"
                          whileHover={{ x: 10 }}
                          transition={{ duration: 0.3 }}
                        >
                          <div className="w-2 h-2 bg-gradient-to-r from-blue-500 to-purple-500 mt-2 rounded-[10px] group-hover/item:scale-150 transition-transform"></div>
                          <p className="text-gray-200/80 group-hover/item:text-gray-100 transition-colors">
                            {finding}
                          </p>
                        </motion.div>
                      ))}
                    </div>
                  </div>
                </div>
              </motion.div>
            ))}
          </div>

          {/* Ïó∞Íµ¨ Î∞©Î≤ïÎ°† ÏÑπÏÖò */}
          <motion.div
            variants={itemVariants}
            className="mt-16 bg-gradient-to-br from-gray-950/50 to-purple-900/50 backdrop-blur-lg p-12 border border-blue-500/10 rounded-[40px] relative overflow-hidden"
          >
            <div className="absolute inset-0 bg-gradient-to-r from-blue-500/5 via-purple-500/5 to-indigo-500/5"></div>
            <div className="relative z-10">
              <h3 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-purple-500 mb-12 text-center">
                Ïó∞Íµ¨ Î∞©Î≤ïÎ°†
              </h3>
              <div className="grid md:grid-cols-3 gap-8">
                {[
                  {
                    title: "Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù",
                    description: "Ï†ïÎüâÏ†Å Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑùÏùÑ ÌÜµÌïú Í∞ùÍ¥ÄÏ†Å Ïù∏ÏÇ¨Ïù¥Ìä∏ ÎèÑÏ∂ú",
                    icon: "üìä"
                  },
                  {
                    title: "Ïã¨Ï∏µ Ïù∏ÌÑ∞Î∑∞",
                    description: "Ïù¥Ìï¥Í¥ÄÍ≥ÑÏûê Ïù∏ÌÑ∞Î∑∞Î•º ÌÜµÌïú Ï†ïÏÑ±Ï†Å Îç∞Ïù¥ÌÑ∞ ÏàòÏßë",
                    icon: "üéØ"
                  },
                  {
                    title: "ÏÇ¨Î°Ä Ïó∞Íµ¨",
                    description: "ÏÑ±Í≥µ/Ïã§Ìå® ÏÇ¨Î°Ä Î∂ÑÏÑùÏùÑ ÌÜµÌïú ÏãúÏÇ¨Ï†ê ÎèÑÏ∂ú",
                    icon: "üìà"
                  }
                ].map((method, index) => (
                  <motion.div
                    key={index}
                    whileHover={{ y: -5, scale: 1.02 }}
                    className="text-center p-8 bg-gradient-to-br from-gray-950/30 to-purple-900/30 backdrop-blur-sm rounded-[30px] transition-all duration-500 border border-blue-500/10 hover:border-blue-500/20 group"
                  >
                    <span className="text-5xl mb-6 block transform group-hover:scale-110 transition-transform duration-500">{method.icon}</span>
                    <h4 className="text-xl font-semibold text-gray-100 mb-4 group-hover:text-transparent group-hover:bg-clip-text group-hover:bg-gradient-to-r group-hover:from-blue-400 group-hover:to-purple-400">
                      {method.title}
                    </h4>
                    <p className="text-gray-200/80">
                      {method.description}
                    </p>
                  </motion.div>
                ))}
              </div>
            </div>
          </motion.div>
        </motion.div>
      </div>

      <style jsx global>{`
        @keyframes blob {
          0% { transform: translate(0, 0) scale(1); }
          33% { transform: translate(20px, -20px) scale(1.1); }
          66% { transform: translate(-20px, 20px) scale(0.9); }
          100% { transform: translate(0, 0) scale(1); }
        }
        .animate-blob {
          animation: blob 7s infinite;
        }
      `}</style>
    </section>
  );
};

export default Research; 